<analysis>
The previous AI engineer successfully initiated the development of the Master Seal management system. Starting from a basic template, a full-stack application was built using FastAPI, React, and MongoDB, adhering strictly to the detailed Arabic product requirements, including RTL support and specific business logic for oil seal manufacturing.

The development progressed through several key phases: an initial build of core modules (authentication, dashboard, sales), followed by the implementation of all remaining sections (inventory, accounts payable, expenses, revenue, invoices, work orders, user management). Throughout the process, the engineer demonstrated robust debugging capabilities, systematically addressing multiple rounds of bug reports, including complex issues related to database object IDs, frontend state synchronization, and intricate business logic for material compatibility and invoice processing.

Significant effort was put into refining user interactions, such as dynamic material selection for sales, comprehensive user and company data management, and flexible invoice status workflows. The work currently focuses on resolving issues with work order display and the ability to add new invoices to existing work orders, indicating a high level of feature completion with ongoing refinement.
</analysis>

<product_requirements>
The Master Seal application is a comprehensive management system for an oil seal manufacturing and supply company. It aims to control the entire workflow including sales, inventory, production, expenses, revenues, and detailed settings.
**Key Modules and Features:**
*   **Sales:** Register customer orders (customer name, date, product type, quantity, price), link to inventory for automatic deduction of raw material height (specifically for oil seals by inner/outer/height dimensions), issue immediate/deferred invoices, track deferred invoices, daily/monthly reports. Supports multiple products per invoice and various oil seal types (RSL, RS, RSE, etc.).
*   **Inventory:** Add new raw materials (cylindrical stock by inner/outer diameter, height, material type like NBR, BUR, etc.), track available quantities, low-stock alerts (below 20mm height highlighted red), record in/out movements. Ability to add finished goods inventory.
*   **Accounts Payable (Deferred Invoices):** View unpaid invoices, detailed customer ledger (balance, invoices, due dates), automatic payment reminders, partial/full payment, add new customers on the fly, view/edit customer data.
*   **Revenues:** Record all income (cash sales, deferred payments, other sources), categorize by type/date, graphical reports showing revenue trends. Should include monthly, weekly, daily income, expenses, raw material cost, and profit.
*   **Expenses:** Record company expenses (raw materials, salaries, electricity, maintenance), categorize by item, link to production costs.
*   **Settings:** Company data (name, address, logo, tax), user management & permissions, print settings, unit of measure, currency (EGP), deferred payment calculation.
*   **Work Order (امر شغل):** A new window showing invoices, allowing selection of multiple invoices for a single work order, displaying used material and unit code (code + material size), and tracking manufacturing status.
*   **User Management:** Multiple user roles (main: Elsawy/100100 with full access; sub: Root/master with limited access to sales, inventory, aging, expenses, work orders). Admin can control user permissions and company details.
*   **Reporting:** Daily/monthly/annual sales, inventory, expense reports, profit/loss analysis, customer statements, financial dashboard.
*   **Technical Details:** Full Arabic UI with RTL support, Tailwind CSS, MongoDB, FastAPI APIs, direct invoice printing, automatic inventory updates, payment methods (cash, deferred, Vodafone Cash, InstaPay).

</product_requirements>

<key_technical_concepts>
-   **Full-stack Development:** Using FastAPI for the backend and React for the frontend.
-   **Database:** MongoDB for data storage.
-   **Styling:** Tailwind CSS for a responsive and modern UI.
-   **Internationalization:** Full Arabic UI with Right-to-Left (RTL) support.
-   **Authentication & Authorization:** Role-based access control for multiple users.
-   **API Design:** RESTful APIs with  prefix for Kubernetes ingress.
-   **Manufacturing Logic:** Specific calculations for oil seal dimensions and raw material deduction.
</key_technical_concepts>

<code_architecture>
The application follows a standard full-stack architecture with a React frontend and a FastAPI backend, interacting with a MongoDB database.



-   ****:
    -   **Summary**: This is the core of the FastAPI backend application. It defines all the API endpoints, handles business logic, interacts with the MongoDB database (using  for async operations), and manages data models.
    -   **Changes Made**: This file has undergone extensive modifications throughout the development.
        *   Initial setup with basic routes and CORS handling.
        *   Implementation of user authentication and authorization logic.
        *   CRUD (Create, Read, Update, Delete) operations for all modules: sales, inventory, customers, expenses, revenues, invoices, work orders, and users.
        *   Complex logic for material compatibility checks (inner/outer diameters, height), raw material deduction on sale, and finished product management.
        *   Refinement of invoice status update logic and the implementation of multi-invoice work orders.
        *   Error handling for MongoDB ObjectId serialization issues, and ensuring correct data parsing.
        *   New endpoints for clearing all data in various modules.
        *   Recent changes involve fixing the API for fetching and creating work orders, particularly addressing ObjectId issues and supporting the addition of invoices to existing work orders.

-   ****:
    -   **Summary**: This is the main React component that structures the entire frontend application. It manages routing between different pages, handles user authentication context, fetches data from the backend APIs, and renders the various UI components for each module.
    -   **Changes Made**: This file has been heavily modified and expanded.
        *   Initial setup with login page and main application structure.
        *   Implementation of navigation (sidebar) and header components.
        *   Development of all module-specific components: Dashboard, Sales, Inventory, Accounts Payable, Expenses, Revenues, Invoices, Work Orders, and User Management.
        *   Integration with backend APIs using  for data fetching and submission.
        *   State management for form inputs, data display, and UI interactions (e.g., dynamic tables, modals).
        *   Implementation of client-side logic for features like check compatibility results display, invoice printing, dynamic invoice status buttons, and interactive user/company data editing.
        *   Recent changes include implementing interactive material selection in the sales module, dynamic wait/executed buttons in invoices, detailed user permissions management, multi-invoice selection in work orders, and connecting delete all buttons to their respective backend functions. It also addresses frontend errors related to state updates and function calls.

-   ****:
    -   **Summary**: This file contains global and component-specific CSS, primarily used for Tailwind CSS directives and custom styles.
    -   **Changes Made**: Modified for initial styling and likely minor adjustments as new components were added, ensuring the application maintains a consistent visual theme and RTL support.

</code_architecture>

<pending_tasks>
-   **Work Order Display**: New work orders are created but not appearing in the list.
-   **Add to Existing Work Order**: Implement the ability to add new invoices to an already created work order.
</pending_tasks>

<current_work>
The AI engineer is currently focused on resolving issues within the Work Order (امر شغل) module. Specifically, two critical problems are being addressed:
1.  **Work Order Display Issue**: New work orders, despite being successfully created in the backend (as confirmed by Chat Message 200: ), are not being displayed in the frontend list (Chat Message 188: عند الضغط علي اضافة امر شغل يعطيني حدث خطاء). The engineer has identified an  (Chat Message 192) when fetching work orders and has applied a fix to the backend API () to correctly retrieve and send data (Chat Message 193-194).
2.  **Adding to Existing Work Order**: The user explicitly requested the ability to add more invoices to an already existing work order (Chat Message 188). The AI engineer has started implementing this functionality, specifically by modifying the frontend () to support this feature (Chat Message 195-196).

The last action was to test adding an invoice to an existing work order after restarting services (Chat Message 201).
</current_work>

<optional_next_step>
Test the functionality to add an invoice to an existing work order.
</optional_next_step>
